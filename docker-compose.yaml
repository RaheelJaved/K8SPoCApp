services:
  passenger-service:
    build:
      context: . # Path to the folder containing Dockerfile
      dockerfile: passenger-service/Dockerfile
    image: passenger-service
    container_name: passenger-service
    ports:
      - "5001:8080" # Map container port 8080 to host port 5001
    environment:
      ConnectionStrings__Postgres: "Host=postgres;Database=pss;Username=admin;Password=password"
      OTEL_EXPORTER_OTLP_ENDPOINT: "http://otel-collector:4317"
      Telemetry__Tracing__EnableConsoleExporter: "false"
      Telemetry__Metrics__EnableConsoleExporter: "false"
      RabbitMQ__URI: "amqp://admin:admin@rabbitmq:5672"
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      otel-collector:
        condition: service_started
      flyway: 
        condition: service_started
    networks:
      - mockpss

  flight-inventory:
    build:
      context: ./flight-inventory
      #dockerfile: flight-inventory/Dockerfile
    image: flight-inventory
    container_name: flight-inventory
    ports:
      - "5002:8080"
    environment:
      DATABASE_URL: "postgresql://admin:password@postgres:5432/pss"
      RABBITMQ_URI: "amqp://admin:admin@rabbitmq:5672"
      OTEL_EXPORTER_OTLP_ENDPOINT: "http://otel-collector:4317"
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - mockpss

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: jaeger
    ports:
      - "16686:16686" # Jaeger UI
      #- "14250:14250" # OTLP ingest
      #- "14268:14268" # Jaeger Collector HTTP
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - mockpss

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"   # RabbitMQ message broker port
      - "15672:15672" # RabbitMQ management UI port
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 10s
      retries: 10
    networks:
      - mockpss

  postgres:
    image: postgres:15
    container_name: postgres
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password
      POSTGRES_DB: pss
    ports:
      - "5432:5432" # PostgreSQL port
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - mockpss

  flyway:
    image: flyway/flyway:latest
    container_name: flyway
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./db/migrations:/flyway/sql
    command: [
      "-X",
      "-url=jdbc:postgresql://postgres:5432/pss",
      "-user=admin",
      "-password=password",
      "migrate"
    ]
    networks:
      - mockpss

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com  # Default login email
      PGADMIN_DEFAULT_PASSWORD: admin          # Default login password
    ports:
      - "5050:80"  # Maps pgAdmin to localhost:5050
    depends_on:
      - postgres   # Ensures PostgreSQL is running before pgAdmin starts
    networks:
      - mockpss

  otel-collector:
    image: otel/opentelemetry-collector:latest
    container_name: otel-collector
    ports:
      - "4317:4317"   # OTLP gRPC
      #- "4318:4318"   # OTLP HTTP
      - "8889:8889"   # Prometheus will scrape the metrics from this port
    volumes:
      - ./config/otel-collector-config.yaml:/etc/otel-collector-config/otel-collector-config.yaml:ro
    command: ["--config=/etc/otel-collector-config/otel-collector-config.yaml"]
    depends_on:
      - jaeger
    networks:
      - mockpss

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./config/prometheus.yaml:/etc/prometheus/prometheus.yaml:ro
    ports:
      - "9090:9090"
    networks:
      - mockpss

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    volumes:
      - ./config/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - mockpss

volumes:
  postgres-data:

networks:
  mockpss:
    attachable: true  
